<div id="abstract" class="form-section hidden">
    <form onsubmit="return false" id="submitAbstractForm">
    <div>
      <input type="text" id="abstract_value" value="<%= SavedAbstract%>" readonly hidden>
      <h3 class="manu_head"><span style="color: #e22424;">*</span>Abstract</h3><br>
      <input type="text" name="manuscript_id" value="<%=article_id%>" readonly hidden>

      <!-- Main toolbar -->
      <div class="bg-body border rounded-bottom h-400px overflow-hidden quill-editor" id="quilleditor" style="height: 500px;">
      </div>
      <div id="word-count" class="wordCount"></div><span id="limit-exceed"> </span>
    </div>
    <p style="color: #e22424;">* Indicates Mandatory Fields</p> <br>

    <div style="display: flex; justify-content: space-around;">
      <!-- back button  -->
      <button type="button" class="submit-next" onclick="NavigationNext('title', 'title_nav', 'abstract_nav', 2)">Back</button>
      <!-- end back button  -->
      <input type="submit" value="submit" id="submitAbstract" disabled hidden>
      <!-- next button  -->
      <button type="button" class="submit-next nextManuscript" onclick="submitSection('submitAbstract')" >Save & Continue</button>
      <!-- end next button  -->
    </div>
    </form>
  </div>


  <script type="module">
    import {quill} from '/js/quill.js'
    const submitAbstractForm = document.getElementById("submitAbstractForm")
    const abstract_value = document.getElementById("abstract_value")
const savedAbstract = abstract_value.value

// 1. DEBUG: Log raw value to inspect
// console.log("RAW ABSTRACT:", savedAbstract); 

// 2. Clean the string
function prepareJSON(str) {
  // Remove ALL HTML entities (&#34; etc)
  const decoded = str.replace(/&[#\w]+;/g, m => 
    new DOMParser().parseFromString(m, "text/html").body.textContent
  );
  
  // Fix common JSON issues:
  return decoded
    .trim()
    .replace(/([\w"])\s*$/, '$1') // Remove trailing whitespace/commas
    .replace(/^([^[{])/, '')       // Remove garbage before JSON
    .replace(/([^\]}])$/, '');     // Remove garbage after JSON
}

// 3. Safe parsing with detailed error handling
let parsedAbstract;
try {
  const cleanJSON = prepareJSON(savedAbstract);
  // console.log("CLEANED JSON:", cleanJSON); // DEBUG
  
  parsedAbstract = JSON.parse(cleanJSON);
  
  // Ensure Quill-compatible format
  if (Array.isArray(parsedAbstract)) {
    parsedAbstract = { ops: parsedAbstract };
  } else if (!parsedAbstract.ops) {
    parsedAbstract = { ops: [{ insert: "\n" }] };
  }
} catch (error) {
  console.error("FULL ERROR:", {
    error, 
    input: savedAbstract,
    cleaned: prepareJSON(savedAbstract)
  });
  parsedAbstract = { ops: [{ insert: "\n" }] }; // Fallback
}

// 4. Set Quill content
quill.setContents(parsedAbstract);
     submitAbstractForm.addEventListener("submit", function(e){
      e.preventDefault()
      // if(!quill.getContents().ops || quill.getContents().ops == '[{"insert":"\\n"}]'){
      //   return showErrorPopup("Abstract Cannot be empty")
      // }
      const data = {
        abstract :  JSON.stringify(quill.getContents().ops)
      }


      fetch(`/submitAbstract?_uid=${uid.value}&prg=true`, {
        method:"POST",
        headers:{
          "Content-type" : "application/JSON"
        },
        body:JSON.stringify(data)
      }).then(res =>res.json())
      .then(data =>{
        if(data.error){
          iziToast.error({
        message: data.error,
        position:"topRight"
      })

        }else if(data.success){
        showProgressSavedPopup()
        showNext('keywords', 'abstract', 'abstract_nav', 'keywords_nav', 'title', 4,4, 'submitAbstract')
    }else {
        showErrorPopup("An Error Occured. Please try again")
        }
      })
    })
  </script>